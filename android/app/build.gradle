def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 28

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.earth.dolphin"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
            android.applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def buildType = variant.buildType.name
                    println("buildType=" + buildType)
                    if (buildType != "debug") {
                        def projectRootDir = "$rootDir"
                        def outputFileDir = new File(projectRootDir + File.separator, "apk")
                        println("outputFileDir=" + outputFileDir)
                        def productFlavorsName = productFlavors.name.toString()
                        def oldApkFlavorsName = productFlavorsName.replace("[", "").trim()
                        def newApkFlavorsName = oldApkFlavorsName.replace("]", "").trim()
                        println("newApkFlavorsName=" + newApkFlavorsName)
                        def apkFlavorsNameDir = new File(outputFileDir, newApkFlavorsName)
                        println("apkFlavorsNameDir=" + apkFlavorsNameDir)
                        // variant.getPackageApplicationProvider().get().outputDirectory = apkFlavorsNameDir
                        def appName
                        if (productFlavorsName.contains("dev")) {
                            appName = "cruise-dev"
                        } else if (productFlavorsName.contains("test")) {
                            appName = "cruise-beta"
                        } else if (productFlavorsName.contains("prod")) {
                            appName = "cruise-release"
                        }else{
                            appName = "cruise-beta"
                        }
                        def releaseApkName = "" + appName + "-" + defaultConfig.versionName + ".apk"
                        output.outputFileName = releaseApkName
                    }
                }
            }
        }
    }

    flavorDimensions 'cruise'
    productFlavors {
        dev {
            dimension 'cruise'
            resValue "string", "app_name", "Cruise-dev"
            applicationIdSuffix '.dev'
        }

        stage {
            dimension 'cruise'
            resValue "string", "app_name", "Cruise-stage"
            applicationIdSuffix '.stage'
        }

        prod {
            dimension 'cruise'
            resValue "string", "app_name", "Cruise"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
